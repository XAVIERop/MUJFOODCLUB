// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Get environment variables - NO FALLBACKS for security
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Environment variables loaded successfully

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Singleton pattern to prevent multiple client instances
let supabase: any = null;

// Create Supabase client with error handling (singleton pattern)
if (!supabase) {
  try {
    console.log('üîß Initializing Supabase client...');
    console.log('üîß SUPABASE_URL exists:', !!SUPABASE_URL);
    console.log('üîß SUPABASE_PUBLISHABLE_KEY exists:', !!SUPABASE_PUBLISHABLE_KEY);
    console.log('üîß SUPABASE_URL value:', SUPABASE_URL ? SUPABASE_URL.substring(0, 30) + '...' : 'undefined');
    
    if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
      console.error('‚ùå Missing required Supabase environment variables');
      console.error('SUPABASE_URL:', !!SUPABASE_URL);
      console.error('SUPABASE_PUBLISHABLE_KEY:', !!SUPABASE_PUBLISHABLE_KEY);
      throw new Error('Missing required Supabase environment variables');
    }

    supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        storage: localStorage,
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: true,
      },
      realtime: {
        // Add error handling for WebSocket connections
        params: {
          eventsPerSecond: 10,
        },
      },
      global: {
        headers: {
          'X-Client-Info': 'muj-food-club@1.0.0',
        },
      },
    });

    // Add global error handling for WebSocket connections
    supabase.realtime.onOpen(() => {
      console.log('‚úÖ Supabase WebSocket connection opened');
    });

    supabase.realtime.onClose(() => {
      console.log('‚ö†Ô∏è Supabase WebSocket connection closed');
    });

    supabase.realtime.onError((error) => {
      console.warn('‚ö†Ô∏è Supabase WebSocket error (non-critical):', error);
      // Don't throw - just log the warning
    });
    
    console.log('‚úÖ Supabase client initialized successfully (singleton)');
  } catch (error) {
    console.error('Failed to initialize Supabase client:', error);
    // Create a mock client that will show errors when used
    supabase = {
      auth: {
        onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } }),
        getSession: () => Promise.resolve({ data: { session: null } }),
        signInWithPassword: () => Promise.resolve({ data: { user: null }, error: { message: 'Supabase not initialized - check environment variables' } }),
        signUp: () => Promise.resolve({ data: { user: null }, error: { message: 'Supabase not initialized - check environment variables' } }),
        signOut: () => Promise.resolve({ error: null }),
      },
      from: () => ({
        select: () => ({ eq: () => ({ order: () => Promise.resolve({ data: [], error: { message: 'Supabase not initialized - check environment variables' } }) }) }),
        insert: () => ({ select: () => ({ single: () => Promise.resolve({ data: null, error: { message: 'Supabase not initialized - check environment variables' } }) }) }),
        update: () => ({ eq: () => Promise.resolve({ data: null, error: { message: 'Supabase not initialized - check environment variables' } }) }),
        delete: () => ({ eq: () => Promise.resolve({ data: null, error: { message: 'Supabase not initialized - check environment variables' } }) }),
      }),
      rpc: () => Promise.resolve({ data: [], error: { message: 'Supabase not initialized - check environment variables' } }),
      channel: () => ({
        on: () => ({ subscribe: () => ({ unsubscribe: () => {} }) }),
      }),
      removeChannel: () => {},
      realtime: {
        onOpen: () => {},
        onClose: () => {},
        onError: () => {},
      },
    } as any;
  }
}

export { supabase };